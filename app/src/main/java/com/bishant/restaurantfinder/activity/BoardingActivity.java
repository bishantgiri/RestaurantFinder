package com.bishant.restaurantfinder.activity;import android.content.Intent;import android.content.pm.PackageManager;import android.os.Build;import android.os.Bundle;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.view.Window;import android.view.WindowManager;import android.widget.Button;import android.widget.HorizontalScrollView;import android.widget.ImageView;import android.widget.TextView;import android.widget.Toast;import androidx.annotation.NonNull;import androidx.core.app.ActivityCompat;import androidx.core.content.ContextCompat;import androidx.recyclerview.widget.LinearLayoutManager;import androidx.recyclerview.widget.RecyclerView;import androidx.viewpager.widget.PagerAdapter;import androidx.viewpager.widget.ViewPager;import com.bishant.restaurantfinder.R;import com.bishant.restaurantfinder.helper.IntoPageTransformation;import com.bishant.restaurantfinder.helper.RestaurantActivity;import com.bishant.restaurantfinder.helper.RestaurantRecyclerViewAdapter;import com.bishant.restaurantfinder.helper.ViewPagerCustomDuration;import com.bishant.restaurantfinder.utilities.Utilities;import com.bumptech.glide.Glide;import java.util.ArrayList;import java.util.List;import static android.Manifest.permission.ACCESS_COARSE_LOCATION;import static android.Manifest.permission.ACCESS_FINE_LOCATION;public class BoardingActivity extends RestaurantActivity implements ViewPager.OnPageChangeListener, View.OnClickListener {    private RecyclerView paginationRecyclerView;    private PaginationRecyclerViewAdapter paginationRecyclerViewAdapter;    private ViewPagerCustomDuration viewPager;    private Button next;    private HorizontalScrollView horizontalScrollView;    private ImageView imageViewBackground;    private static final int MY_PERMISION_CODE = 10;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        requestWindowFeature(Window.FEATURE_NO_TITLE);        getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,                WindowManager.LayoutParams.FLAG_FULLSCREEN);        setContentView(R.layout.activity_boarding);        checkPermession();        initialiseViews();        initialiseListeners();        prepareRecyclerView();        prepareViewPager();    }    @Override    protected void initialiseViews() {        paginationRecyclerView = findViewById(R.id.pagination_recyclerview);        viewPager = findViewById(R.id.view_pager);        next = findViewById(R.id.nextButton);        horizontalScrollView = findViewById(R.id.scroll_view);        imageViewBackground = findViewById(R.id.background);    }    @Override    protected void initialiseListeners() {        next.setOnClickListener(this);    }    private void prepareRecyclerView() {        LinearLayoutManager linearLayoutManager = new LinearLayoutManager(this, LinearLayoutManager.HORIZONTAL, false);        paginationRecyclerView.setLayoutManager(linearLayoutManager);        paginationRecyclerView.setHasFixedSize(true);        paginationRecyclerViewAdapter = new PaginationRecyclerViewAdapter();        paginationRecyclerView.setAdapter(paginationRecyclerViewAdapter);    }    private void prepareViewPager() {        viewPager.setAdapter(new ViewPagerAdapter());        viewPager.setScrollDurationFactor(2);        viewPager.addOnPageChangeListener(this);        viewPager.setPageTransformer(false, new IntoPageTransformation());    }    @Override    public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {        int x = (int) ((viewPager.getWidth() * position + positionOffsetPixels) * computeFactor());        horizontalScrollView.scrollTo(x, 0);    }    private float computeFactor() {        return (imageViewBackground.getWidth() - viewPager.getWidth()) /                (float) (viewPager.getWidth() * (viewPager.getAdapter().getCount() - 1));    }    @Override    public void onPageSelected(int position) {        for (int i = 0; i < 3; i++) {            if (i == position) {                paginationRecyclerViewAdapter.booleanList.set(i, true);            } else {                paginationRecyclerViewAdapter.booleanList.set(i, false);            }        }        paginationRecyclerViewAdapter.notifyDataSetChanged();        if (viewPager.getCurrentItem() == viewPager.getAdapter().getCount() - 1) {            next.setText("Let's Go");        } else {            next.setText("Next");        }    }    @Override    public void onPageScrollStateChanged(int state) {    }    @Override    public void onClick(View view) {        switch (view.getId()) {            case R.id.nextButton:                if (next.getText().toString().equals("Let's Go")) {                    Utilities.setFirstRunCompleted();                    Intent intent = new Intent(BoardingActivity.this, LoginActivity.class);                    startActivity(intent);                    finish();                }                viewPager.setCurrentItem(viewPager.getCurrentItem() + 1);                break;        }    }    private class PaginationRecyclerViewAdapter extends RestaurantRecyclerViewAdapter {        private List<Boolean> booleanList = new ArrayList<>();        PaginationRecyclerViewAdapter() {            for (int i = 0; i < 3; i++) {                if (i == 0) {                    booleanList.add(true);                } else {                    booleanList.add(false);                }            }        }        @NonNull        @Override        public RecyclerView.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {            View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.boarding_pagination_item, parent, false);            return new PaginationRecyclerViewAdapter.VHItem(view);        }        @Override        public void onBindViewHolder(@NonNull RecyclerView.ViewHolder holder, int position) {            VHItem vhItem = (VHItem) holder;            boolean isBackgroundEnabled = booleanList.get(position);            if (isBackgroundEnabled) {                vhItem.view1.setBackground(ContextCompat.getDrawable(BoardingActivity.this, R.drawable.pagination_primary_fill));            } else {                vhItem.view1.setBackground(ContextCompat.getDrawable(BoardingActivity.this, R.drawable.pagination_primary_unfill));            }        }        @Override        public int getItemCount() {            return booleanList.size();        }        @Override        public void add(Object object) {        }        @Override        public void clear() {        }        class VHItem extends RecyclerView.ViewHolder {            private View view1;            VHItem(View view) {                super(view);                view1 = view.findViewById(R.id.view);            }        }    }    private class ViewPagerAdapter extends PagerAdapter {        private int[] imageList = new int[]{R.drawable.food, R.drawable.resimage, R.drawable.menu};        private String[] titleList = new String[]{"Hello Foodie", "Find restaurant with us", "Order form smart menu"};        private String[] subTitleList = new String[]{"Searching for a place to eat/drink? Welcome!.", "Explore and find awesome restaurants near by.", "View smart menu of restaurants and order online."};        @NonNull        @Override        public Object instantiateItem(@NonNull ViewGroup collection, int position) {            LayoutInflater inflater = LayoutInflater.from(BoardingActivity.this);            ViewGroup layout = (ViewGroup) inflater.inflate(R.layout.item_view_pager_boarding, collection, false);            ImageView eventImage = layout.findViewById(R.id.image_view);            Glide.with(BoardingActivity.this).load(imageList[position]).into(eventImage);            TextView title = layout.findViewById(R.id.title_tv);            TextView subTitle = layout.findViewById(R.id.description_tv);            title.setText(titleList[position]);            subTitle.setText(subTitleList[position]);            layout.setTag(position);            collection.addView(layout);            return layout;        }        @Override        public void destroyItem(@NonNull ViewGroup collection, int position, @NonNull Object view) {            collection.removeView((View) view);        }        @Override        public int getCount() {            return titleList.length;        }        @Override        public boolean isViewFromObject(@NonNull View view, @NonNull Object object) {            return view == object;        }        @Override        public CharSequence getPageTitle(int position) {            return "";        }    }    private void checkPermession() {        if (ActivityCompat.checkSelfPermission(BoardingActivity.this, ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED                && ActivityCompat.checkSelfPermission(BoardingActivity.this, ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) {            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {                ActivityCompat.requestPermissions(BoardingActivity.this,                        new String[]{ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION},                        MY_PERMISION_CODE);            }        }    }    @Override    public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {        if (requestCode == MY_PERMISION_CODE) {            if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {                //getUserLocation();            } else {                //showAlert();                Toast.makeText(BoardingActivity.this, "Please switch on GPS to access the features", Toast.LENGTH_LONG).show();                //progress.setVisibility(View.GONE);            }        }    }}